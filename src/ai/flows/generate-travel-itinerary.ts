// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Generates a personalized travel itinerary based on destination, budget, and trip duration.
 *
 * - generateTravelItinerary - A function that generates a travel itinerary.
 * - TravelItineraryInput - The input type for the generateTravelItinerary function.
 * - TravelItineraryOutput - The return type for the generateTravelItinerary function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const TravelItineraryInputSchema = z.object({
  destinations: z
    .array(
      z.object({
        name: z.string().describe('The name of the travel destination.'),
        durationDays: z.number().describe('The number of days to spend at this destination.'),
      })
    )
    .min(1)
    .describe('A list of destinations for the trip.'),
  numberOfTravelers: z.number().describe('The number of people traveling.'),
  budget: z.string().describe("The budget for the entire trip (e.g., '$5000', 'luxury')."),
  interests: z.string().optional().describe('Interests (e.g., history, food, art).'),
});
export type TravelItineraryInput = z.infer<typeof TravelItineraryInputSchema>;

const TravelItineraryOutputSchema = z.object({
  hotelSuggestions: z
    .array(
      z.object({
        name: z.string().describe('Name of the hotel.'),
        destination: z.string().describe('The destination city this hotel is in.'),
        cost: z.string().describe('Cost indicator (e.g., $, $$, $$$).'),
        bookingLink: z.string().describe('Link to book the hotel.'),
      })
    )
    .describe('List of suggested hotels, grouped by destination.'),
  dailyItineraries: z
    .array(
      z.object({
        day: z.number().describe('Day number in the itinerary.'),
        destination: z.string().describe('The destination city for this day of the itinerary.'),
        activities: z
          .array(
            z.object({
              description: z.string().describe('Description of the activity.'),
              metroStations: z.string().optional().describe('Nearest metro stations.'),
              cost: z.string().describe('Cost indicator (e.g., $, $$, $$$).'),
              link: z.string().optional().describe('Link for more information or booking.'),
              transportToNextActivity: z.object({
                  description: z.string().describe('Description of the transport to the next activity.'),
                  googleMapsLink: z.string().describe('Google Maps link for the route.'),
                }).optional().describe('Transportation to the next activity. Omit for the last activity of the day.'),
            })
          )
          .describe('List of activities for the day.'),
      })
    )
    .describe('Detailed daily itineraries.'),
  transportSuggestions: z
    .array(
      z.object({
        type: z.string().describe('Type of transport (e.g., Flight, Train, Bus).'),
        description: z.string().describe('Description of the transport option.'),
        bookingLink: z.string().describe('Link to book the transport.'),
      })
    )
    .describe('List of overall transportation suggestions for travel between the main destinations (e.g., flights from Paris to Rome).'),
  costEffectiveTransportSuggestions: z.array(
    z.object({
      destination: z.string().describe('The destination city this suggestion is for.'),
      suggestion: z.string().describe('A detailed suggestion for the most cost-effective way to use public transport in this city, considering the itinerary.'),
      airportTransport: z.string().describe('Suggestions for getting from the airport to the city center.'),
    })
  ).describe('A list of cost-effective public transport strategies for each destination, including airport transport.'),
});
export type TravelItineraryOutput = z.infer<typeof TravelItineraryOutputSchema>;

export async function generateTravelItinerary(input: TravelItineraryInput): Promise<TravelItineraryOutput> {
  return generateTravelItineraryFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateTravelItineraryPrompt',
  input: {schema: TravelItineraryInputSchema},
  output: {schema: TravelItineraryOutputSchema},
  prompt: `You are an expert travel planner named Savel, specializing in cost-effective travel. Generate a detailed travel itinerary for a multi-destination trip based on the user's preferences.

The user will be visiting the following destinations:
{{#each destinations}}
- {{name}} for {{durationDays}} days
{{/each}}

Number of travelers: {{{numberOfTravelers}}}
Total trip duration is the sum of all days. Please number the days in the daily itinerary sequentially across the entire trip.
For each day in the itinerary, you must specify the destination city.

Budget: {{{budget}}}
Interests: {{{interests}}}

Your tasks are:
1.  **Hotel Suggestions**: Provide 3 hotel suggestions for each destination with cost indicators ($, $$, $$$), booking links, and the destination city.
2.  **Daily Itinerary**: Create a detailed daily itinerary with activity suggestions, nearest metro stations, cost estimates, and external links for each day of the entire trip. For each day, provide transportation suggestions *between* activities, including a description and a Google Maps link. Do not add transportation for the last activity of a day.
3.  **Inter-Destination Transport**: Provide a list of overall transportation suggestions for travel *between* the main destinations (e.g., flights from Paris to Rome).
4.  **Cost-Effective Public Transport Analysis**: This is the most important part. For each destination city, provide a detailed analysis of the most cost-effective public transportation strategy.
    -   Based on the planned daily activities, determine if it's cheaper to buy single tickets or a multi-day pass (e.g., 24h, 48h, 72h pass).
    -   Provide a clear recommendation. For example: "For your 3 days in Venice, purchasing a 72-hour Vaporetto pass for €40 is more cost-effective than buying individual tickets at €7.50 each, given your planned travel between islands."
    -   Consider the number of travelers for any group discounts.
    -   Include a separate suggestion for getting from the arrival airport to the city center.
`,
});

const generateTravelItineraryFlow = ai.defineFlow(
  {
    name: 'generateTravelItineraryFlow',
    inputSchema: TravelItineraryInputSchema,
    outputSchema: TravelItineraryOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
